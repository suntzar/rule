// build-js.js - Vers√£o "Vanilla" Node.js para combinar e minificar arquivos JS

const fs = require('fs');
const path = require('path');

// --- Configura√ß√£o ---
const jsInputDir = path.join(__dirname, 'js'); // Diret√≥rio base dos seus arquivos JS
const jsOutputDir = path.join(__dirname, 'dist'); // O mesmo diret√≥rio de sa√≠da 'dist'
const jsOutputFile = path.join(jsOutputDir, 'noxss.js');
const jsOutputMinFile = path.join(jsOutputDir, 'noxss.min.js');

// -----------------------------------------------------------------------------
// IMPORTANTE: Defina a ordem de concatena√ß√£o dos arquivos aqui.
// O arquivo 'core.js' DEVE ser o primeiro.
// -----------------------------------------------------------------------------
const jsFilesToCombine = [
    'core.js',
    'components/alerts.js',
    'components/fab.js',       // Usando a vers√£o mais recente que voc√™ forneceu
    'components/forms.js',
    'components/modals.js',
    'components/player.js',
    'components/tabs.js',
    'components/toasts.js',
    'components/typography.js'
    // Adicione outros componentes aqui se necess√°rio
];

console.log('üöÄ Iniciando o processo de build da Noxss JS (modo nativo)...');

try {
    // 1. Garante que o diret√≥rio de sa√≠da 'dist/' exista
    if (!fs.existsSync(jsOutputDir)) {
        fs.mkdirSync(jsOutputDir, { recursive: true });
    }
    console.log(`‚úÖ Diret√≥rio '${jsOutputDir}/' pronto.`);

    let combinedJs = '';

    // 2. L√™ e combina cada arquivo na ordem especificada
    for (const file of jsFilesToCombine) {
        const fullPath = path.join(jsInputDir, file);
        try {
            console.log(`   + Juntando: ${file}`);
            const fileContent = fs.readFileSync(fullPath, 'utf8');
            // Adiciona o conte√∫do do arquivo, um ponto e v√≠rgula para seguran√ßa, e duas quebras de linha
            combinedJs += fileContent + ';\n\n';
        } catch (e) {
            console.error(`‚ùå Erro ao ler o arquivo: ${fullPath}`);
            throw e; // Interrompe o build se um arquivo n√£o for encontrado
        }
    }

    // 3. Adiciona um banner/cabe√ßalho
    const banner = `/*!\n * Noxss JS v1.0\n * Copyright ${new Date().getFullYear()} [Seu Nome]\n * Gerado em: ${new Date().toISOString()}\n */\n`;
    const finalJs = banner + combinedJs;

    // 4. Salva o arquivo compilado e leg√≠vel
    fs.writeFileSync(jsOutputFile, finalJs);
    console.log(`‚úÖ Arquivo JS compilado salvo em: ${path.basename(jsOutputFile)}`);

    // 5. Minifica√ß√£o Manual (B√°sica e Segura para JS)
    console.log('‚öôÔ∏è  Minificando o JS (m√©todo b√°sico)...');
    let minifiedJs = finalJs;
    // Remove coment√°rios de bloco /* ... */
    minifiedJs = minifiedJs.replace(/\/\*[\s\S]*?\*\//g, '');
    // Remove coment√°rios de linha // ...
    minifiedJs = minifiedJs.replace(/\/\/(.*)/g, '');
    // Remove linhas em branco e espa√ßos no in√≠cio/fim de cada linha
    minifiedJs = minifiedJs.replace(/^\s*|\s*$/gm, '');
    // Remove quebras de linha (substitui por um espa√ßo para n√£o quebrar a sintaxe)
    minifiedJs = minifiedJs.replace(/(\r\n|\n|\r)/gm, ' ');
    // Remove m√∫ltiplos espa√ßos em branco
    minifiedJs = minifiedJs.replace(/\s+/g, ' ');

    fs.writeFileSync(jsOutputMinFile, minifiedJs);
    console.log(`‚úÖ Arquivo JS minificado salvo em: ${path.basename(jsOutputMinFile)}`);
    console.log('\n‚ö†Ô∏è  Aviso: A minifica√ß√£o √© b√°sica. Para produ√ß√£o, considere usar uma ferramenta como Terser.');

    console.log('\nüéâ Build do JavaScript conclu√≠do com sucesso!');

} catch (error) {
    console.error('\n‚ùå Erro durante o processo de build do JavaScript:');
    console.error(error);
    process.exit(1); // Encerra com erro
}