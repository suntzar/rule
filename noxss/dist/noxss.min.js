(function (window) { 'use strict'; window.Noxss = window.Noxss || {}; window.Noxss.version = '1.0.0'; window.Noxss.utils = window.Noxss.utils || {};})(window);;(function (Noxss, window, document) { 'use strict';if (!Noxss) { console.error("Noxss Core (core.js) é necessário, mas não foi encontrado."); return; } function dismissAlert(alertElement) { if (!alertElement) return; alertElement.classList.add('is-hiding'); alertElement.addEventListener('animationend', () => { alertElement.remove(); }, { once: true }); }const AlertsAPI = { init: function(container = document) { const closeButtons = container.querySelectorAll('.noxss-alert__close-btn'); closeButtons.forEach(button => { if (button.dataset.alertInitialized) return;const alertElement = button.closest('.noxss-alert'); if (alertElement) { button.addEventListener('click', (event) => { event.preventDefault(); dismissAlert(alertElement); }); button.dataset.alertInitialized = true; } }); } }; Noxss.Alerts = AlertsAPI; document.addEventListener('DOMContentLoaded', () => { Noxss.Alerts.init(); });})(window.Noxss, window, document);;(function (Noxss, window, document) { 'use strict';if (!Noxss) { console.error("Noxss Core (core.js) é necessário."); return; }const FabController = { fabElement: null, contentWrappers: [], activeWrapperIndex: 0, defaultIcon: 'plus', currentAction: null,init: function(selector = '.noxss-fab') { this.fabElement = document.querySelector(selector); if (!this.fabElement) return;this.setupContentWrappers(); this.bindEvents(); }, setupContentWrappers: function() { this.fabElement.innerHTML = ''; for (let i = 0; i < 2; i++) { const wrapper = document.createElement('div'); wrapper.className = 'noxss-fab__content-wrapper'; this.fabElement.appendChild(wrapper); this.contentWrappers.push(wrapper); } },bindEvents: function() { document.body.addEventListener('noxss:tab:change', (event) => { this.updateState(event.detail.targetPanel); }); this.fabElement.addEventListener('click', (event) => { this.executeAction(event); }); }, updateState: function(activePanel) { if (!this.fabElement) return; const isVisible = activePanel && activePanel.hasAttribute('data-fab-visible'); this.fabElement.classList.toggle('is-hidden', !isVisible);if (isVisible) { this.updateContent(activePanel); if (activePanel.dataset.fabTarget) { this.currentAction = { type: 'modal', value: activePanel.dataset.fabTarget }; } else if (activePanel.dataset.fabAction) { this.currentAction = { type: 'function', value: activePanel.dataset.fabAction }; } else { this.currentAction = null; } } else { this.currentAction = null; } },updateContent: function(activePanel) { const nextContentHTML = this.getContentHTML(activePanel); const currentWrapper = this.contentWrappers[this.activeWrapperIndex]; if (currentWrapper.innerHTML.trim() === nextContentHTML.trim()) return;const nextWrapperIndex = (this.activeWrapperIndex + 1) % 2; const nextWrapper = this.contentWrappers[nextWrapperIndex]; nextWrapper.innerHTML = nextContentHTML; currentWrapper.classList.remove('is-active'); nextWrapper.classList.add('is-active'); this.activeWrapperIndex = nextWrapperIndex; },getContentHTML: function(activePanel) { if (activePanel.hasAttribute('data-fab-html')) { return activePanel.dataset.fabHtml; } if (window.feather) { const iconName = activePanel.dataset.fabIcon || this.defaultIcon; const icon = feather.icons[iconName] || feather.icons[this.defaultIcon]; return icon.toSvg({ class: 'noxss-icon' }); } return '<span style="font-size: 2rem; line-height: 1;">+</span>'; }, executeAction: function(event) { if (!this.currentAction) return;event.preventDefault();switch (this.currentAction.type) { case 'modal': if (Noxss.Modals && typeof Noxss.Modals.open === 'function') { const modalId = this.currentAction.value.replace(/^#/, ''); Noxss.Modals.open(modalId); } else if (window.bootstrap && typeof window.bootstrap.Modal === 'function') { const modalEl = document.querySelector(this.currentAction.value); if (modalEl) { const modalInstance = bootstrap.Modal.getOrCreateInstance(modalEl); modalInstance.show(); } else { console.warn(`Noxss FAB: Modal com seletor "${this.currentAction.value}" não encontrado.`); } } break;case 'function': try { new Function(this.currentAction.value)(); } catch (e) { console.error(`Noxss FAB: Erro ao executar a ação "${this.currentAction.value}"`, e); } break; } } }; Noxss.Fab = FabController; document.addEventListener('DOMContentLoaded', () => Noxss.Fab.init());})(window.Noxss, window, document);;(function (Noxss, window, document) { 'use strict'; if (!Noxss) { console.error("Noxss Core é necessário."); return; }const FormsAPI = { init: function() { this.initRangeSliders(); },initRangeSliders: function(container = document) { const sliders = container.querySelectorAll('.noxss-range'); sliders.forEach(slider => { if (slider.dataset.rangeInitialized) return; const wrapper = document.createElement('div'); wrapper.className = 'noxss-range-wrapper'; slider.parentNode.insertBefore(wrapper, slider); wrapper.appendChild(slider);const tooltip = document.createElement('span'); tooltip.className = 'noxss-range-tooltip'; wrapper.appendChild(tooltip); const updateSlider = () => { const min = parseFloat(slider.min) || 0; const max = parseFloat(slider.max) || 100; const value = parseFloat(slider.value); const percent = ((value - min) / (max - min)) * 100; slider.style.setProperty('--value-percent', `${percent}%`); tooltip.textContent = value; tooltip.style.left = `calc(${percent}% + (${10 - percent * 0.2}px))`; }; slider.addEventListener('input', updateSlider); slider.addEventListener('mousedown', () => wrapper.classList.add('is-active')); slider.addEventListener('touchstart', () => wrapper.classList.add('is-active')); slider.addEventListener('mouseup', () => wrapper.classList.remove('is-active')); slider.addEventListener('touchend', () => wrapper.classList.remove('is-active')); updateSlider(); slider.dataset.rangeInitialized = true; }); } };Noxss.Forms = FormsAPI; document.addEventListener('DOMContentLoaded', () => Noxss.Forms.init());})(window.Noxss, window, document);;(function (Noxss, window, document) { 'use strict';if (!Noxss) { console.error("Noxss Core (core.js) é necessário, mas não foi encontrado."); return; } const modals = new Map(); const FOCUSABLE_ELEMENTS = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]';let openModalId = null; function openModal(modalId) { const modal = modals.get(modalId); if (!modal || modal.isOpen) return;openModalId = modalId; modal.element.classList.add('is-open'); document.body.style.overflow = 'hidden'; const firstFocusable = modal.element.querySelector(FOCUSABLE_ELEMENTS); if (firstFocusable) { firstFocusable.focus(); }modal.isOpen = true; } function closeModal() { if (!openModalId) return;const modal = modals.get(openModalId); if (modal) { modal.element.classList.remove('is-open'); document.body.style.overflow = ''; modal.isOpen = false; } if (modal.triggerElement) { modal.triggerElement.focus(); } openModalId = null; } function handleFocusTrap(event) { if (event.key !== 'Tab' || !openModalId) return;const modalElement = modals.get(openModalId)?.element; if (!modalElement) return;const focusableElements = Array.from(modalElement.querySelectorAll(FOCUSABLE_ELEMENTS)); const firstElement = focusableElements[0]; const lastElement = focusableElements[focusableElements.length - 1];if (event.shiftKey) { if (document.activeElement === firstElement) { lastElement.focus(); event.preventDefault(); } } else { if (document.activeElement === lastElement) { firstElement.focus(); event.preventDefault(); } } }const ModalsAPI = { init: function() { const modalElements = document.querySelectorAll('[data-noxss-modal]'); modalElements.forEach(modalEl => { const modalId = modalEl.id; if (!modalId) { console.warn("Noxss Modals: Modal encontrado sem um ID. A inicialização foi ignorada.", modalEl); return; } modals.set(modalId, { element: modalEl, isOpen: false, triggerElement: null }); modalEl.addEventListener('click', (event) => { if (event.target === modalEl) { closeModal(); } }); }); const openTriggers = document.querySelectorAll('[data-noxss-modal-open]'); openTriggers.forEach(trigger => { const modalId = trigger.dataset.noxssModalOpen; trigger.addEventListener('click', (event) => { const modal = modals.get(modalId); if (modal) { modal.triggerElement = event.currentTarget; } openModal(modalId); }); }); const closeTriggers = document.querySelectorAll('[data-noxss-modal-close]'); closeTriggers.forEach(trigger => { trigger.addEventListener('click', () => { closeModal(); }); }); window.addEventListener('keydown', (event) => { if (event.key === 'Escape' && openModalId) { closeModal(); } handleFocusTrap(event); }); },open: openModal, close: closeModal };Noxss.Modals = ModalsAPI; document.addEventListener('DOMContentLoaded', () => Noxss.Modals.init());})(window.Noxss, window, document);;(function (Noxss, window, document) { 'use strict';if (!Noxss) { console.error("Noxss Core (core.js) é necessário, mas não foi encontrado."); return; } const SVG_ICON_PLAY = '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="5 3 19 12 5 21 5 3"></polygon></svg>'; const SVG_ICON_PAUSE = '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="6" y="4" width="4" height="16"></rect><rect x="14" y="4" width="4" height="16"></rect></svg>'; const DEFAULT_ALBUM_ART_SRC = "noxss/assets/preview/disc.jpg"; const REPEAT_NONE = 'none'; const REPEAT_ALL = 'all'; const REPEAT_ONE = 'one'; const playersData = new Map(); function getFallbackTitle(url) { try { return decodeURIComponent(url.split('/').pop().replace(/\.[^/.]+$/, "")); } catch (e) { return "Título Desconhecido"; } } function renderTrackInfo(ui, info) { ui.title.textContent = info.title || "Título Desconhecido"; ui.artist.textContent = info.artist || "Artista Desconhecido"; if (info.pictureData) { const { data, format } = info.pictureData; let base64String = ""; for (let i = 0; i < data.length; i++) base64String += String.fromCharCode(data[i]); ui.albumArt.src = `data:${format};base64,${window.btoa(base64String)}`; } else { ui.albumArt.src = DEFAULT_ALBUM_ART_SRC; } } function renderPlayerState(ui, state) { ui.playPause.innerHTML = state.isPlaying ? SVG_ICON_PAUSE : SVG_ICON_PLAY; ui.playPause.classList.toggle("noxss-active", state.isPlaying); ui.playPause.disabled = !state.controlsEnabled; ui.prev.disabled = !state.controlsEnabled || !state.hasPrev; ui.next.disabled = !state.controlsEnabled || !state.hasNext; } async function fetchAndRenderMetadata(playerId, songUrl) { const data = playersData.get(playerId); if (!data) return; if (typeof window.jsmediatags === 'undefined') { renderTrackInfo(data.ui, { title: getFallbackTitle(songUrl) }); return; } try { const response = await fetch(songUrl); if (!response.ok) throw new Error(`HTTP Error: ${response.status}`); const blob = await response.blob(); window.jsmediatags.read(blob, { onSuccess: (tag) => { renderTrackInfo(data.ui, { title: tag.tags.title, artist: tag.tags.artist, pictureData: tag.tags.picture }); }, onError: () => { renderTrackInfo(data.ui, { title: getFallbackTitle(songUrl) }); } }); } catch (error) { renderTrackInfo(data.ui, { title: getFallbackTitle(songUrl) }); } } async function loadTrack(playerId, index) { const data = playersData.get(playerId); if (!data || index < 0 || index >= data.playlist.length) return; data.currentIndex = index; const songUrl = data.playlist[index]; renderTrackInfo(data.ui, { title: "Carregando...", artist: getFallbackTitle(songUrl) }); renderPlayerState(data.ui, { isPlaying: false, controlsEnabled: false }); await fetchAndRenderMetadata(playerId, songUrl); data.ui.audio.src = songUrl; renderPlayerState(data.ui, { isPlaying: false, controlsEnabled: true, hasPrev: index > 0, hasNext: index < data.playlist.length - 1 }); }async function playSongAtIndex(playerId, index) { const data = playersData.get(playerId); if (!data) return; if (data.currentIndex === index && data.ui.audio.src) { data.ui.audio.play(); return; } data.currentIndex = index; const songUrl = data.playlist[index]; renderTrackInfo(data.ui, { title: "Carregando...", artist: getFallbackTitle(songUrl) }); renderPlayerState(data.ui, { isPlaying: false, controlsEnabled: false }); await fetchAndRenderMetadata(playerId, songUrl); data.ui.audio.src = songUrl; try { await data.ui.audio.play(); } catch (err) { } } function initializeInstance(playerElement) { const playerId = playerElement.id; if (!playerId || playersData.has(playerId)) return; const ui = { audio: playerElement.querySelector(".noxss-audio-player"), albumArt: playerElement.querySelector(".noxss-album-art"), title: playerElement.querySelector(".noxss-title"), artist: playerElement.querySelector(".noxss-artist"), playPause: playerElement.querySelector(".noxss-play-pause"), prev: playerElement.querySelector(".noxss-prev-button"), next: playerElement.querySelector(".noxss-next-button") }; if (!ui.audio) { console.error(`Noxss Player (${playerId}): Elemento <audio> não encontrado.`); return; }playersData.set(playerId, { playlist: [], currentIndex: -1, repeatMode: REPEAT_ALL, ui });ui.audio.addEventListener('play', () => { const data = playersData.get(playerId); renderPlayerState(ui, { isPlaying: true, controlsEnabled: true, hasPrev: data.currentIndex > 0, hasNext: data.currentIndex < data.playlist.length - 1 }); }); ui.audio.addEventListener('pause', () => { const data = playersData.get(playerId); renderPlayerState(ui, { isPlaying: false, controlsEnabled: data.playlist.length > 0, hasPrev: data.currentIndex > 0, hasNext: data.currentIndex < data.playlist.length - 1 }); }); ui.audio.addEventListener('ended', () => { const data = playersData.get(playerId); let nextIndex; switch (data.repeatMode) { case REPEAT_ONE: nextIndex = data.currentIndex; break; case REPEAT_ALL: nextIndex = (data.currentIndex + 1) % data.playlist.length; break; case REPEAT_NONE: default: if (data.currentIndex < data.playlist.length - 1) { nextIndex = data.currentIndex + 1; } else { renderTrackInfo(data.ui, { title: "Fim da playlist", artist: "" }); renderPlayerState(data.ui, { isPlaying: false, controlsEnabled: true, hasPrev: true, hasNext: false }); data.ui.audio.src = ""; return; } break; } playSongAtIndex(playerId, nextIndex); }); ui.audio.addEventListener('error', () => renderTrackInfo(ui, { title: "Erro ao carregar" })); ui.playPause.addEventListener('click', () => { const data = playersData.get(playerId); if (ui.audio.paused) { if (data.currentIndex === -1 && data.playlist.length > 0) { playSongAtIndex(playerId, 0); } else if (data.currentIndex !== -1) { ui.audio.play(); } } else { ui.audio.pause(); } }); ui.next.addEventListener('click', () => { const data = playersData.get(playerId); const nextIndex = (data.repeatMode === REPEAT_ALL && data.currentIndex === data.playlist.length - 1) ? 0 : data.currentIndex + 1; if(nextIndex < data.playlist.length) playSongAtIndex(playerId, nextIndex); }); ui.prev.addEventListener('click', () => { const data = playersData.get(playerId); if (data.currentIndex > 0) playSongAtIndex(playerId, data.currentIndex - 1); }); renderTrackInfo(ui, { title: "Noxss Player", artist: "Pronto" }); renderPlayerState(ui, { isPlaying: false, controlsEnabled: false }); } const PlayerAPI = { initById: (playerId) => { const playerElement = document.getElementById(playerId); if (playerElement) initializeInstance(playerElement); }, setPlaylist: (playerId, songUrls, playImmediately = false, repeatMode = REPEAT_ALL) => { const data = playersData.get(playerId); if (!data) { console.error(`Noxss Player (${playerId}): Player não inicializado.`); return; } data.playlist = songUrls || []; data.currentIndex = -1; data.repeatMode = [REPEAT_NONE, REPEAT_ALL, REPEAT_ONE].includes(repeatMode) ? repeatMode : REPEAT_ALL; data.ui.audio.src = ""; if (data.playlist.length > 0) { if (playImmediately) { playSongAtIndex(playerId, 0); } else { loadTrack(playerId, 0); } } else { renderTrackInfo(data.ui, { title: "Playlist vazia" }); renderPlayerState(data.ui, { isPlaying: false, controlsEnabled: false }); } }, setRepeatMode: (playerId, mode) => { const data = playersData.get(playerId); if (data && [REPEAT_NONE, REPEAT_ALL, REPEAT_ONE].includes(mode)) { data.repeatMode = mode; } else { console.error(`Noxss Player (${playerId}): Modo de repetição inválido ou player não encontrado.`); } } };Noxss.Player = PlayerAPI;document.addEventListener('DOMContentLoaded', () => { const playersOnPage = document.querySelectorAll('.noxss-player-compact[id]'); playersOnPage.forEach(playerEl => PlayerAPI.initById(playerEl.id)); });})(window.Noxss, window, document);;(function (Noxss, window, document) { 'use strict';if (!Noxss) { console.error("Noxss Core (core.js) é necessário, mas não foi encontrado."); return; } function initLayoutAdjustments() { const bottomNav = document.querySelector('.noxss-navbar--bottom'); const root = document.documentElement; if (bottomNav && bottomNav.offsetParent !== null) { root.style.setProperty('--noxss-safe-area-inset-bottom', `${bottomNav.offsetHeight}px`); } else { root.style.setProperty('--noxss-safe-area-inset-bottom', '0px'); } }const Tabs = { activeTabId: null, init: function (selector = '.noxss-tabs') { document.querySelectorAll(selector).forEach(system => { if (system.dataset.tabsInitialized) return; this.setup(system); system.dataset.tabsInitialized = true; }); }, setup: function (systemElement) { const contentArea = systemElement.querySelector('.noxss-tabs__content-area'); const panels = Array.from(systemElement.querySelectorAll('.noxss-tabs__panel')); const allButtons = Array.from(document.querySelectorAll(`[data-tab-id]`));if (!contentArea || panels.length === 0) { console.error("Noxss Tabs: Estrutura HTML (.noxss-tabs__content-area ou .noxss-tabs__panel) não encontrada.", systemElement); return; } let scrollTimeout; const updateActiveState = (activeTabId) => { if (this.activeTabId === activeTabId) return;this.activeTabId = activeTabId; allButtons.forEach(button => { const buttonControlsThisSystem = systemElement.querySelector(`#panel-${button.dataset.tabId}`); if (buttonControlsThisSystem) { button.classList.toggle('is-active', button.dataset.tabId === activeTabId); } }); systemElement.dispatchEvent(new CustomEvent('noxss:tab:change', { bubbles: true, detail: { activeTabId: activeTabId, targetPanel: document.getElementById(`panel-${activeTabId}`) } })); }; const switchToTab = (tabId) => { const panelIndex = panels.findIndex(p => p.id === `panel-${tabId}`); if (panelIndex !== -1) { contentArea.scrollTo({ left: contentArea.offsetWidth * panelIndex, behavior: 'smooth' }); } }; allButtons.forEach(button => { if (systemElement.querySelector(`#panel-${button.dataset.tabId}`)) { button.addEventListener('click', (e) => { e.preventDefault(); switchToTab(button.dataset.tabId); }); } }); contentArea.addEventListener('scroll', () => { clearTimeout(scrollTimeout); scrollTimeout = setTimeout(() => { const currentIndex = Math.round(contentArea.scrollLeft / contentArea.offsetWidth); const activePanel = panels[currentIndex]; if (activePanel) { const activeTabId = activePanel.id.replace('panel-', ''); updateActiveState(activeTabId); } }, 10); }); const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { entry.target.classList.toggle('is-visible', entry.isIntersecting); }); }, { root: contentArea, threshold: 0.4 }); panels.forEach(panel => observer.observe(panel)); const defaultTabId = systemElement.dataset.defaultTab || panels[0]?.id.replace('panel-', ''); if (defaultTabId) { setTimeout(() => { const panelIndex = panels.findIndex(p => p.id === `panel-${defaultTabId}`); if(panelIndex !== -1) { contentArea.scrollTo({ left: contentArea.offsetWidth * panelIndex, behavior: 'auto' }); updateActiveState(defaultTabId); } }, 150); } } };Noxss.Tabs = Tabs;document.addEventListener('DOMContentLoaded', () => { initLayoutAdjustments(); Noxss.Tabs.init(); window.addEventListener('resize', initLayoutAdjustments); });})(window.Noxss, window, document);;(function (Noxss, window, document) { 'use strict';if (!Noxss) { console.error("Noxss Core (core.js) é necessário, mas não foi encontrado."); return; } const containers = new Map(); const ICONS = { success: '<i data-feather="check-circle" class="noxss-icon"></i>', danger: '<i data-feather="alert-circle" class="noxss-icon"></i>', warning: '<i data-feather="alert-triangle" class="noxss-icon"></i>', info: '<i data-feather="info" class="noxss-icon"></i>' }; function getOrCreateContainer(position) { if (containers.has(position)) { return containers.get(position); }const container = document.createElement('div'); container.className = `noxss-toast-container noxss-toast-container--${position}`; document.body.appendChild(container); containers.set(position, container); return container; } function removeToast(toastElement) { toastElement.classList.add('is-hiding'); toastElement.addEventListener('animationend', () => { toastElement.remove(); }, { once: true }); }const ToastsAPI = { show: function(options) { if (typeof options === 'string') { options = { message: options }; }const { message, status = 'info', duration = 4000, closable = true, position = 'bottom-right' } = options;const container = getOrCreateContainer(position); const toastElement = document.createElement('div'); toastElement.className = `noxss-toast noxss-toast--${status}`; const iconHTML = ICONS[status] || ICONS.info;const closeButtonHTML = closable ? `<button class="noxss-toast__close-btn" aria-label="Fechar notificação"><i data-feather="x" class="noxss-icon"></i></button>` : '';toastElement.innerHTML = ` <div class="noxss-toast__icon">${iconHTML}</div> <div class="noxss-toast__message">${message}</div> ${closeButtonHTML} `; container.appendChild(toastElement); if (window.feather) { window.feather.replace(); } const closeBtn = toastElement.querySelector('.noxss-toast__close-btn'); if (closeBtn) { closeBtn.addEventListener('click', () => removeToast(toastElement)); } setTimeout(() => { removeToast(toastElement); }, duration); } }; Noxss.Toasts = ToastsAPI;})(window.Noxss, window, document);;(function (Noxss, window, document) { 'use strict';if (!Noxss) { console.error("Noxss Core (core.js) é necessário, mas não foi encontrado."); return; }const Typography = { init: function () { this.initCodeBlocks(); },initCodeBlocks: function () { const codeBlocks = document.querySelectorAll('.noxss-code-block'); if (codeBlocks.length === 0) return; if (typeof hljs === 'undefined') { console.warn('Noxss Typography: highlight.js (hljs) não foi encontrado.'); }codeBlocks.forEach(blockWrapper => { const codeElement = blockWrapper.querySelector('pre code'); if (codeElement) { if (typeof hljs !== 'undefined') { hljs.highlightElement(codeElement); } this.createCopyButton(blockWrapper, codeElement); } }); }, createCopyButton: function (wrapper, codeElement) { const button = document.createElement('button'); button.className = 'noxss-copy-btn'; button.setAttribute('aria-label', 'Copiar código'); button.setAttribute('title', 'Copiar código'); const copyIcon = '<svg xmlns="http: button.innerHTML = copyIcon; let timeoutId = null;button.addEventListener('click', () => { navigator.clipboard.writeText(codeElement.innerText).then(() => { button.classList.add('copied'); button.setAttribute('aria-label', 'Copiado!'); button.setAttribute('title', 'Copiado!'); clearTimeout(timeoutId); timeoutId = setTimeout(() => { button.classList.remove('copied'); button.setAttribute('aria-label', 'Copiar código'); button.setAttribute('title', 'Copiar código'); }, 2000);}).catch(err => { console.error('Noxss Typography: Falha ao copiar texto.', err); button.setAttribute('aria-label', 'Erro ao copiar'); button.setAttribute('title', 'Erro ao copiar'); }); }); wrapper.insertBefore(button, wrapper.firstChild); } };Noxss.Typography = Typography;document.addEventListener('DOMContentLoaded', () => { Noxss.Typography.init(); });})(window.Noxss, window, document);;